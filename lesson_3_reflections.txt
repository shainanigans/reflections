//When would you want to use a remote repository rather than keeping all your work local?
A remote repository would be good for working on a project from different places (and using difference computers) and collaborating on a project with others because the commits are universally available.

//Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Depending on the size of the project and your role in it, you may not need every single commit on your local directory. It would be more difficult to find the information you need (commits related to your role on a project, for example) using git log if every single commit were automatically pulled. Manually pulling puts the user back in control of what information is important to them.

//Describe the differences between forks, clones, and branches. When would you use one instead of another?
A branch can be thought of as a turn away from previous commits, which allows a person to "walk" (make changes to files) down two or more different paths simultaneously. "Walking" down one path does not affect the course of the other. A clone is copying a repository, including all of its branches, and recreating it somewhere else. This can be a clone of a repository in a local directory or a clone from a remote repository like those on GitHub. When cloning, there is no visible link from the clone to the original repository. A fork is similar to a clone in that it copies an entire repository including its branches. However, a fork is exclusive to when a repository is being copied from one user's GitHub account to another and it maintains a link to its original source.

//What is the benefit of having a copy of the last known state of the remote stored locally?
By having a copy of the last known state of the remote stored locally, you're able to see what changes you've made since the last push. You could also use it to see what changes have been made to the remote since your last pull, which would help keep the remote and the local directory in sync (if desired).

//How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
Without Git or GitHub, it would be much harder to work on the same part of the project (like the same file). I could use a checkout system like in Dreamweaver for web files, which ensures that only one person is working on one file at a time, but that's not helpful for other file types or for making sure that someone does change something in one file that affects another. It would need to be clear who is working on what at any given moment, and when conflicts do arise, it would need to be fixed and merged manually every time. The only thing that seems easier at the moment is remembering how to do everything, but hopefully soon that will be second nature to me!

//When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
Making changes in a separate branch is good for collaboration because it gives collaborators an opportunity to see your work before it's added to the master branch, giving them time to correct changes and be made aware of any changes that will affect what they're working on. Separate branches are also good for adding new features that don't necessarily need to be part of the working master branch but you want easily accessible. Working directly on the master branch is good when working for the end goal of creating the first finished working product of the project.